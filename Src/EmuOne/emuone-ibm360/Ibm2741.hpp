//
//  emuone-ibm360/Ibm2741.hpp
//
//  IBM 2741 terminal
//
//////////
#pragma once

namespace ibm360
{
    //////////
    //  The IBM 2741 terminal
    class EMUONE_IBM360_EXPORT Ibm2741 : public Device
    {
        CANNOT_ASSIGN_OR_COPY_CONSTRUCT(Ibm2741)

        friend class ::Ibm2741Editor;

        //////////
        //  Types
    public:
        //  The "type" of IBM 2741 terminal
        class EMUONE_IBM360_EXPORT Type : public core::ComponentType
        {
            DECLARE_SINGLETON(Type)

            //////////
            //  StockObject
        public:
            virtual QString     mnemonic() const override;
            virtual QString     displayName() const override;

            //////////
            //  ComponentType
        public:
            virtual core::ComponentCategory *   category() const override;
            virtual bool        isCompatibleWith(core::Architecture * architecture) const override;
            virtual Ibm2741 *   createComponent() override;
        };

        //  The "UI" of IBM 2741 terminal
        class EMUONE_IBM360_EXPORT Ui : public core::ComponentUi
        {
            CANNOT_ASSIGN_OR_COPY_CONSTRUCT(Ui)

            //////////
            //  Construction/destruction
        public:
            explicit Ui(Ibm2741 * ibm2741);
            virtual ~Ui();

            //////////
            //  core::ComponentUi
        public:
            virtual core::FullScreenWidgetList  fullScreenWidgets() override;

            //////////
            //  Implementation
        private:
            Ibm2741FullScreenWidget *   _fullScreenWidget;
        };

        //  Errors that can be generated by IBM 2741
        enum class ErrorCode
        {
            Success,
            Busy,
            Unknown
        };

        //  The listener to completion of I/O requests that involve data transfer
        class EMUONE_IBM360_EXPORT TransferCompletionListener
        {
            //////////
            //  This is an interface
        public:
            virtual ~TransferCompletionListener() {}

            //////////
            //  Operations
        public:
            virtual void        transferCompleted(uint32_t bytesTransferred, ErrorCode errorCode) = 0;
        };

        //////////
        //  Construction/destruction
    public:
        Ibm2741(const QString & name, uint16_t address);
        virtual ~Ibm2741();

        //////////
        //  Component
    public:
        virtual core::ComponentType*type() const override;
        virtual ComponentEditor *   createEditor(QWidget * parent) override;
        virtual QString             shortStatus() const override;
        virtual core::ComponentUi * createUi() override;

        //////////
        //  Component (state control) - all thread-safe
    public:
        virtual State           state() const override;
        virtual void            connect() override;
        virtual void            initialise() override;
        virtual void            start() override;
        virtual void            stop() noexcept override;
        virtual void            deinitialise() noexcept override;
        virtual void            disconnect() noexcept override;

        //////////
        //  Component (serialisation)
    public:
        virtual void            serialiseConfiguration(QDomElement & configurationElement) const override;
        virtual void            deserialiseConfiguration(QDomElement & configurationElement) override;

        //////////
        //  Operations
    public:
        //  Initiates a "write" operation.
        //  If a "write" begins successfully, the method returns "Success" and the
        //  "completionListener" is guaranteed to eventually be notified when the
        //  "write" is done. This is done on an internal worker thread.
        //  If the "write" cannot be started, returns the non-"Success" error code.
        ErrorCode               beginWrite(const util::Buffer * buffer, TransferCompletionListener * completionListener);

        //////////
        //  Implementation
    private:
        State                   _state = State::Constructed;
        mutable QRecursiveMutex _stateGuard;

        Ibm2741EditorList       _editors;   //  ...that have been created so far

        //  Runtime state
        enum class _DeviceState
        {
            Idle,
            Reading,
            Writing,
            NotOperational
        };
        volatile _DeviceState   _deviceState = _DeviceState::NotOperational;

        //////////
        //  Requests sent to the worker thread
        class _Request
        {
            CANNOT_ASSIGN_OR_COPY_CONSTRUCT(_Request)

            //////////
            //  Construction/destruction
        public:
            _Request() {}
            virtual ~_Request() {}
        };

        class _WriteRequest : public _Request
        {
            CANNOT_ASSIGN_OR_COPY_CONSTRUCT(_WriteRequest)

            //////////
            //  Construction/destruction
        public:
            explicit _WriteRequest(const util::Buffer * buffer, TransferCompletionListener * completionListener)
                :   buffer(buffer), completionListener(completionListener) {}
            virtual ~_WriteRequest() {}

            //////////
            //  Properties
        public:
            const util::Buffer *const           buffer;
            TransferCompletionListener *const   completionListener;
        };

        //////////
        //  Threads
        util::BlockingQueue<_Request*>  _requestQueue;

        class _WorkerThread : public QThread
        {
            CANNOT_ASSIGN_OR_COPY_CONSTRUCT(_WorkerThread)

            //////////
            //  Construction/destruction
        public:
            explicit _WorkerThread(Ibm2741 * ibm2741) : _ibm2741(ibm2741) {}
            virtual ~_WorkerThread() {}

            //////////
            //  QThread
        public:
            virtual void    run() override;

            //////////
            //  Operations
        public:
            void            requestStop() { _stopRequested = true;  }

            //////////
            //  Implementation
        private:
            Ibm2741 *const  _ibm2741;
            volatile bool   _stopRequested = false;
        };
        _WorkerThread *     _workerThread = nullptr;
    };
}

//  End of emuone-ibm360/Ibm2741.hpp
